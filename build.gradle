plugins {
  id 'application'
  id 'java'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.5'
  id 'jacoco'
  id 'maven-publish'
  id "com.github.ben-manes.versions" version "0.52.0"
  id "org.cyclonedx.bom" version "2.3.0"
}

group = 'uk.gov.hmcts.cp'
version = System.getProperty('API_SPEC_VERSION') ?: '0.0.999'

def githubActor = project.findProperty("github.actor") ?: System.getenv("GITHUB_ACTOR")
def githubToken = project.findProperty("github.token") ?: System.getenv("GITHUB_TOKEN")
def githubRepo = System.getenv("GITHUB_REPOSITORY")

//debugging
//if (githubActor != null) {
//  println "üîê Configuring GitHub Packages publishing to: https://maven.pkg.github.com/${githubRepo}"
//}
//println "GitHub Packages publishing required environment variables:"
//println " - GITHUB_ACTOR=${githubActor != null ? '‚úî' : '‚ùå'}"
//println " - GITHUB_TOKEN=${githubToken != null ? '‚úî' : '‚ùå'}"
//println " - GITHUB_REPOSITORY=${githubRepo != null ? '‚úî' : '‚ùå'}"

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += sourceSets.main.output
      runtimeClasspath += sourceSets.main.output
    }
    resources.srcDir file('src/functionalTest/resources')
  }
  integrationTest {
    java {
      compileClasspath += sourceSets.main.output
      runtimeClasspath += sourceSets.main.output
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly
}


tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.named('test') {
  useJUnitPlatform()
  systemProperty 'API_SPEC_VERSION', project.version
  failFast = true
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
  }
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.named('jacocoTestReport') {
  dependsOn tasks.named('test')
  reports {
    xml.required.set(true)
    csv.required.set(false)
    html.required.set(true)
  }
}

tasks.named('check') {
  dependsOn tasks.named('integration')
}

// check dependencies upon release ONLY
tasks.named("dependencyUpdates").configure {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri("https://maven.pkg.github.com/hmcts/*")
    credentials {
      username = githubActor
      password = githubToken
    }
  }
  maven {
    url = 'https://jitpack.io'
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact(tasks.named('bootJar'))
      artifact(tasks.named('jar'))
    }
  }
  repositories {
    maven {
      name = "GitHubPackages"
      url = uri("https://maven.pkg.github.com/${githubRepo}")
      credentials {
        username = githubActor
        password = githubToken
      }
    }
  }
}

//Creation of Software Bill of Materials
//https://github.com/CycloneDX/cyclonedx-gradle-plugin
cyclonedxBom {
  includeConfigs = ["runtimeClasspath"]
  skipConfigs = ["compileClasspath", "testImplementation"]
  schemaVersion = "1.6"
  componentVersion = providers.provider { project.version.toString() }
  destination = file("$buildDir/reports")
}

jar {
  enabled = true
  archiveClassifier.set('plain')
  if (file("CHANGELOG.md").exists()) {
    from('CHANGELOG.md') {
      into 'META-INF'
    }
  } else {
    println "‚ö†Ô∏è  CHANGELOG.md not found, skipping inclusion in JAR"
  }
}

bootJar {
  archiveFileName = "${rootProject.name}-${project.version}.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

application {
  mainClass = 'uk.gov.hmcts.cp.Application'
}

ext {
  apiJudgesVersion="0.2.0"
  log4JVersion = "2.24.3"
  logbackVersion = "1.5.18"
  lombokVersion = "1.18.38"
  springBootVersion = "3.4.5"
}

dependencies {
  implementation "uk.gov.hmcts.cp:api-cp-refdata-courthearing-judges:$apiJudgesVersion"
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
  implementation 'io.swagger.core.v3:swagger-core:2.2.32'

  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-aop'
  implementation 'org.springframework.boot:spring-boot-starter-json'

  implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:3.1.11'
  implementation 'com.azure.spring:spring-cloud-azure-trace-sleuth:4.20.0'

  implementation 'net.logstash.logback:logstash-logback-encoder:8.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

  implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.2'
  implementation 'org.hibernate.validator:hibernate-validator:8.0.2.Final'
  implementation 'org.apache.commons:commons-lang3:3.17.0'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

  testImplementation(platform('org.junit:junit-bom:5.12.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion, {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}
