name: CI Build and Publish

on:
  workflow_call:
    secrets:
      AZURE_DEVOPS_ARTIFACT_USERNAME:
        required: true
      AZURE_DEVOPS_ARTIFACT_TOKEN:
        required: true
      HMCTS_ADO_PAT:
        required: true
      PACT_BROKER_TOKEN:
        required: true
    inputs:
      is_release:
        required: false
        type: boolean
        default: false
      is_publish:
        required: true
        type: boolean
      trigger_docker:
        required: true
        type: boolean
      trigger_deploy:
        required: true
        type: boolean
      pact_broker_base_url:
        required: false
        type: string
        default: https://hmcts-dts.pactflow.io
      pact_broker_host:
        required: false
        type: string
        default: hmcts-dts.pactflow.io
      pact_env:
        required: false
        type: string
        default: dev/pactTest
      pact_application_name:
        required: false
        type: string
        default: VPJudgesProvider

jobs:
  Artefact-Version:
    runs-on: ubuntu-latest
    outputs:
      artefact_version: ${{ inputs.is_release && steps.artefact.outputs.release_version || steps.artefact.outputs.draft_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Artefact Version
        id: artefact
        uses: hmcts/artefact-version-action@v1
        with:
          release: ${{ inputs.is_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Build:
    needs: [Artefact-Version]
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.repo_vars.outputs.repo_name }}
      artefact_name: ${{ steps.repo_vars.outputs.artefact_name }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: current

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Install Pact CLI
        run: npm install --save-dev @pact-foundation/pact-cli

      # This step checks PactFlow to determine if any pacts have changed since the last successful verification
      # for this provider and branch. If changes are detected, subsequent provider verification should be triggered.
      - name: Check for changed pacts
        id: changed
        uses: pactflow/actions/is-change-pact@v1
        with:
          to: ${{ github.ref_name }}
          brokerUrl: ${{ inputs.pact_broker_base_url }}
          brokerToken: ${{ secrets.PACT_BROKER_TOKEN }}
          provider: ${{ inputs.pact_application_name }}
          environment: ${{ inputs.PACT_ENV }}

      - name: Gradle Build
        env:
          ARTEFACT_VERSION: ${{ needs.Artefact-Version.outputs.artefact_version }}
          AZURE_DEVOPS_ARTIFACT_USERNAME: ${{ secrets.AZURE_DEVOPS_ARTIFACT_USERNAME }}
          AZURE_DEVOPS_ARTIFACT_TOKEN: ${{ secrets.AZURE_DEVOPS_ARTIFACT_TOKEN }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
          PACT_BROKER_URL: ${{ inputs.pact_broker_base_url }}
          PACT_BROKER_HOST: ${{ inputs.pact_broker_host }}
          PACT_ENV:  ${{ inputs.pact_env }}
        run: |
          echo "Building with ARTEFACT_VERSION=$ARTEFACT_VERSION"
          gradle build -DARTEFACT_VERSION="$ARTEFACT_VERSION"

          git_branch=$(git rev-parse --abbrev-ref HEAD)
          
          echo "ARTEFACT_VERSION=$ARTEFACT_VERSION"
          echo "git_branch=$git_branch"
          echo "PACT_BROKER_TOKEN=$PACT_BROKER_TOKEN"
          echo "PACT_BROKER_URL=$PACT_BROKER_URL"
          echo "PACT_BROKER_HOST=$PACT_BROKER_HOST"
          echo "PACT_ENV=$PACT_ENV"

          # Run provider verification
#          gradle pactVerificationTest --debug \
#            -Dpact.broker.version="$ARTEFACT_VERSION" \
#            -Dpact.verifier.publishResults="true" \
#            -Dpact.provider.branch="$git_branch" \
#            -Dpact.broker.token="$PACT_BROKER_TOKEN" \
#            -Dpact.broker.url="$PACT_BROKER_URL" \
#            -Dpact.broker.host="$PACT_BROKER_HOST" \
#            -Dpact.env="$PACT_ENV"
          
#          gradle pactVerificationTest --debug  \
#            -Dpact.provider.version="$GIT_COMMIT" \
#            -Dpact.verifier.publishResults=true \
#            -Dpact.provider.branch="$git_branch" \
#            -Dpact.broker.token="$PACT_BROKER_TOKEN" \
#            -Dpact.broker.url="$PACT_BROKER_URL"

      # https://github.com/pactflow/actions
#      - uses: pactflow/actions/publish-pact-files@v1
#        with:
#          pactflow_token: ${{ secrets.PACTFLOW_TOKEN }}
#          pacticipant: my-consumer
#          version: ${{ github.sha }}
#          pact_directory: ./pacts
#          tags: "main, latest"

      - uses: pactflow/actions/create-version-tag@v2
        with:
          tag: ${{ inputs.pact_env }}
          version: ${{ needs.Artefact-Version.outputs.artefact_version }}
          application_name: ${{ inputs.pact_application_name }}
          broker_url: ${{ inputs.pact_broker_base_url }}
          token: ${{ secrets.PACT_BROKER_TOKEN }}

      - uses: pactflow/actions/can-i-deploy@v2
        with:
          application_name: ${{ inputs.pact_application_name }}
          broker_url: ${{ inputs.pact_broker_base_url }}
          token: ${{ secrets.PACT_BROKER_TOKEN }}
          version: ${{ needs.Artefact-Version.outputs.artefact_version }}
          to_environment: ${{ inputs.pact_env }}
          retry_while_unknown: 3 # Optional: number of times to retry while the verification status is unknown
          retry_interval: 5 # Optional: number of seconds to wait between retries

      - name: Publish
        if: ${{ inputs.is_publish }}
        env:
          ARTEFACT_VERSION: ${{ needs.Artefact-Version.outputs.artefact_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZURE_DEVOPS_ARTIFACT_USERNAME: ${{ secrets.AZURE_DEVOPS_ARTIFACT_USERNAME }}
          AZURE_DEVOPS_ARTIFACT_TOKEN: ${{ secrets.AZURE_DEVOPS_ARTIFACT_TOKEN }}
        run: |
          echo "Publishing artefact for version: $ARTEFACT_VERSION"
        
          gradle publish \
            -DARTEFACT_VERSION=$ARTEFACT_VERSION \
            -DGITHUB_REPOSITORY=${{ github.repository }} \
            -DGITHUB_ACTOR=${{ github.actor }} \
            -DGITHUB_TOKEN=$GITHUB_TOKEN \
            -DAZURE_DEVOPS_ARTIFACT_USERNAME=$AZURE_DEVOPS_ARTIFACT_USERNAME \
            -DAZURE_DEVOPS_ARTIFACT_TOKEN=$AZURE_DEVOPS_ARTIFACT_TOKEN

      - name: Extract repo name
        id: repo_vars
        run: |
          repo_name=${GITHUB_REPOSITORY##*/}
          echo "repo_name=${repo_name}" >> $GITHUB_OUTPUT
          echo "artefact_name=${repo_name}-${{ needs.Artefact-Version.outputs.artefact_version }}" >> $GITHUB_OUTPUT

      - name: Upload JAR Artefact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/${{ steps.repo_vars.outputs.artefact_name }}.jar

  Build-Docker:
    needs: [ Build, Artefact-Version ]
    if: ${{ inputs.trigger_docker }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download JAR Artefact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image to GitHub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.Artefact-Version.outputs.artefact_version }}
          build-args: |
            BASE_IMAGE=openjdk:21-jdk-slim
            JAR_FILENAME=${{ needs.Build.outputs.artefact_name }}.jar

  Deploy:
    needs: [ Build, Artefact-Version ]
    if: ${{ inputs.trigger_deploy }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract repo name
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Trigger ADO pipeline
        uses: hmcts/trigger-ado-pipeline@v1
        with:
          pipeline_id: 460
          ado_pat: ${{ secrets.HMCTS_ADO_PAT }}
          template_parameters: >
            {
              "GROUP_ID": "uk.gov.hmcts.cp",
              "ARTIFACT_ID": "${{ env.REPO_NAME }}",
              "ARTIFACT_VERSION": "${{ needs.Artefact-Version.outputs.artefact_version }}",
              "TARGET_REPOSITORY": "${{ github.repository }}"
            }